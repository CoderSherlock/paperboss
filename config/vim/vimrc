" basic {
	set nocompatible
	syntax on
	set number
	" set relativenumber
	set ruler
	" set cursorline	" This adding cursorline at current edit line, so
	" fancy not efficient, so I just erase this
	set nobackup
	set autochdir

	set hlsearch	" highlight search
	set incsearch	" show seach proceed
	set bs=2 		" make backspace working ??
	" set mouse=a		" set mouse available
	set splitbelow	" Change the split windows location for YCM
" }



" cursor {
	set shiftwidth=4
	set softtabstop=4
	set tabstop=4
" }



" fold {
	set foldenable
	set foldlevel=1
	set foldmethod=manual
	set foldclose=all
" }


" plugins {
	call plug#begin('~/.vim/plugged')
	
	" plugins
	Plug 'majutsushi/tagbar'
	Plug 'scrooloose/nerdtree'

	" Plug 'scrooloose/syntastic'    Static grammer check Github@liuchengxu said this is out date, replaced with following one.
	Plug 'w0rp/ale'

	Plug 'itchyny/lightline.vim'
	Plug 'Xuyuanp/nerdtree-git-plugin'
	Plug 'kien/ctrlp.vim'
	Plug 'valloric/youcompleteme'
	Plug 'scrooloose/nerdcommenter'
	Plug 'rking/ag.vim'	
	Plug 'dyng/ctrlsf.vim'
	Plug 'altercation/vim-colors-solarized'
	Plug 'raimondi/delimitmate'
	Plug 'liuchengxu/space-vim-dark'
	Plug 'dracula/vim', { 'as': 'dracula' }
	Plug 'Shougo/unite.vim'
	" Plug 'devjoe/vim-codequery'

	call plug#end()

" }


" keymap {
	nmap <F3> :NERDTreeToggle<CR>
	nmap <F4> :TagbarToggle<CR>
	nmap <S-F4> :!ctags -R --fields=+iaS --extra=+q .<CR><CR>  
" }
 
" UI {
	color dracula
	hi Comment cterm=italic
	hi Normal     ctermbg=NONE guibg=NONE
	hi LineNr     ctermbg=NONE guibg=NONE
	hi SignColumn ctermbg=NONE guibg=NONE
" }


" vim-airline {
"     let g:airline_powerline_fonts = 1
"     let g:airline_theme='papercolor'
"
"     let g:airline#extensions#tabline#enabled = 1	Start Upper Tabline
"
"
" }

" lightline {
	let g:lightline = {
	      \ 'colorscheme': 'powerline',
	      \ }
" }

" NERDTree {
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }


" Syntastic {
	" set statusline+=%#warningmsg#
	" set statusline+=%{SyntasticStatuslineFlag()}
	" set statusline+=%*
    "
	" let g:syntastic_always_populate_loc_list = 0
	" let g:syntastic_auto_loc_list = 1
	" let g:syntastic_check_on_open = 1
	" let g:syntastic_check_on_wq = 1
" }


" ale {
	let g:ale_set_balloon = 1
	
	let g:ale_set_highlights = 0
	let g:ale_fix_on_save = 1
	let g:ale_echo_msg_format = '[#%linter%#] %s [%severity%]'
	let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']

	let g:ale_sign_error = '•'
	let g:ale_sign_warning = '•'
	let g:ale_echo_msg_error_str = '✹ Error'
	let g:ale_echo_msg_warning_str = '⚠ Warning'

	nmap <Leader>en <Plug>(ale_next)
	nmap <Leader>ep <Plug>(ale_previous)
	nnoremap <Leader>ts :ALEToggle<CR>
" }


" youcompleteme {
	let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'  
	let g:ycm_max_diagnostics_to_display = 10000

	let g:ycm_error_symbol = '>'
	let g:ycm_warning_symbol = '>'

	nnoremap <leader>gt :YcmCompleter GoTo<CR>
	nnoremap <leader>gc :YcmCompleter GoToDeclaration<CR>
	nnoremap <leader>gd :YcmCompleter GoToDefinition<CR>
	nnoremap <leader>gty :YcmCompleter GetType<CR>
	nnoremap <leader>gdo :YcmCompleter GetDoc<CR>
" }


" nerdcommenter {
	" Add spaces after comment delimiters by default
	let g:NERDSpaceDelims = 1

	" Use compact syntax for prettified multi-line comments
	let g:NERDCompactSexyComs = 1

	" Align line-wise comment delimiters flush left instead of following code
	" indentation
	let g:NERDDefaultAlign = 'left'

	" Set a language to use its alternate delimiters by default
	let g:NERDAltDelims_java = 1

	" " Add your own custom formats or override the defaults
	let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

	" Allow commenting and inverting empty lines (useful when commenting a
	" region)
	let g:NERDCommentEmptyLines = 1

	" " Enable trimming of trailing whitespace when uncommenting
	let g:NERDTrimTrailingWhitespace = 1
" }
